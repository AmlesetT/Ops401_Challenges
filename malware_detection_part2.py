#!/usr/bin/python3

# Script Name:                  Ops 401 - Challenge 32
# Author:                       Amleset Tesfamariam, CF Ops lecture 401, ChatGPT
# Date of latest revision:      03/27/2024
# Purpose:                      To existing Python script, add hash validation capabilities.
# Reason:                       It is critical to be able to create and use malware detecting tools to better prevent and help protect sensitive data.


import os
import hashlib
import time

def generate_md5(file_path):
    hash_md5 = hashlib.md5()
    with open(file_path, "rb") as file: 
        for chunk in iter(lambda: file.read(4096), b""):
            hash_md5.update(chunk)
    return hash_md5.hexdigest()

def search_files(file_name, directory):
    hits = 0
    searched_files = 0

    # Searching through the directory 
    for root, _, files in os.walk(directory):
        for file in files:
            if file == file_name:
                hits += 1
                file_path = os.path.join(root, file)
                md5_hash = generate_md5(file_path)
                file_size = os.path.getsize(file_path)
                timestamp = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime())

                print(f"Timestamp: {timestamp}")
                print(f"File Name: {file}")
                print(f"File Size: {file_size} bytes")
                print(f"File Path: {file_path}")
                print("=" * 50)                
            
            searched_files += 1

    print("\nSearch Summary:")
    print(f"Files Searched: {searched_files}")
    print(f"Hits Found: {hits}")

def main():
    file_name = input("Please enter the file name you would like to search for: ")
    directory = input("Please enter the directory you would like to search in: ")

    if os.path.isdir(directory):
        print("\nSearching for files...")
        search_files(file_name, directory)
    else:
        print("Invalid directory path. Please try again.")

if __name__ == "__main__":
    main()

