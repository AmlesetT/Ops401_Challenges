#!/usr/bin/python3

# Script Name:                  Ops 401 - Challenge 38
# Author:                       Amleset Tesfamariam, CF Ops lecture 401, https://github.com/codefellows/seattle-cybersecurity-401d10/blob/main/class-38/challenges/DEMO.md, ChatGPT
# Date of latest revision:      04/02/2024
# Purpose:                      To develop a Python script that automates the detection of XSS vulnerabilities.
# Reason:                       It can be very helpful to use tools which can automate the detection of certain vulnerabilities in various systems/environments.


# Import libraries
import requests
from pprint import pprint
from bs4 import BeautifulSoup as bs
from urlparse import urljoin

# Declare functions

# This function retrieves all forms present on a webpage
# The purpose of this function as it relates to the overall objectives of the script is to identify potential XSS vulnerabilities in the form fields
def get_all_forms(url):
    soup = bs(requests.get(url).content, "html.parser")
    return soup.find_all("form")

# This function extracts the details about the form, including: action, method, and input fields
# The purpose of this function as it relates to the overall objectives of the script is to gather information about the forms on a webpage to further analyze
def get_form_details(form):
    details = {}
    action = form.attrs.get("action").lower()
    method = form.attrs.get("method", "get").lower()
    inputs = []
    for input_tag in form.find_all("input"):
        input_type = input_tag.attrs.get("type", "text")
        input_name = input_tag.attrs.get("name")
        inputs.append({"type": input_type, "name": input_name})
    details["action"] = action
    details["method"] = method
    details["inputs"] = inputs
    return details

# This function submits the form with specified values and retrieves the response
# The purpose of this function as it relates to the overall objectives of the script is to simulate form submission in order to test for XSS vulnerabilities
def submit_form(form_details, url, value):
    target_url = urljoin(url, form_details["action"])
    inputs = form_details["inputs"]
    data = {}
    for input in inputs:
        if input["type"] == "text" or input["type"] == "search":
            input["value"] = value
        input_name = input.get("name")
        input_value = input.get("value")
        if input_name and input_value:
            data[input_name] = input_value

    if form_details["method"] == "post":
        return requests.post(target_url, data=data)
    else:
        return requests.get(target_url, params=data)

# This function scans a webpage for potential XSS vulnerabilities 
# The purpose of this function as it relates to the overall objectives of the script is to submit formulated JavaScript payloads to form fields and checks for reflected XSS
def scan_xss(url):
    forms = get_all_forms(url)
    print("[+] Detected {} forms on {}.".format(len(forms), url))
    # Added HTTP and JS code here so that it will cause a XSS-vulnerable field to create an alert prompt with some text
    js_script = "<script>alert('XSS')</script>"     # JS payload to be injected
    is_vulnerable = False
    for form in forms:
        form_details = get_form_details(form)
        content = submit_form(form_details, url, js_script).content.decode()
        if js_script in content:
            print("[+] XSS Detected on {}".format(url))
            print("[*] Form details:")
            pprint(form_details)
            is_vulnerable = True
    return is_vulnerable

# Main

# The main function prompts the user to enter a URL to test for XSS vulnerabilities
# The purpose of this main as it relates to the overall objectives of the script is to call the scan_xss function to scan the provided URL for XSS vulnerabilities
if __name__ == "__main__":
    url = input("Enter a URL to test for XSS:") 
    print(scan_xss(url))

# Finished annotating this script and copied it to Web Security Dojo

# Tested this script against one XSS-positive target: https://xss-game.appspot.com/level1/frame
# Detected output from XSS-positive target:
    # Enter a URL to test for XSS:"https://xss-game.appspot.com/level1/frame"
    # [+] Detected 1 forms on https://xss-game.appspot.com/level1/frame.
    # [+] XSS Detected on https://xss-game.appspot.com/level1/frame
    # [*] Form details:
    # {'action': u'',
    #  'inputs': [{'name': u'query',
    #              'type': 'text',
    #              'value': "<script>alert('XSS')</script>"},
    #             {'name': None, 'type': u'submit'}],
    #  'method': u'get'}
    # True

# Tested this script against one XSS-negative target: http://dvwa.local/login.php
# Detected output from XSS-negative target:
    # Enter a URL to test for XSS:"http://dvwa.local/login.php"
    # [+] Detected 1 forms on http://dvwa.local/login.php.
    # False

